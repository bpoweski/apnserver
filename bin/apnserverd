#!/usr/bin/env ruby
$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'getoptlong'
require 'rubygems'
require 'daemons'
require 'eventmachine'
require 'apnserver'
require 'apnserver/server'

def usage
  puts "Usage: apnserverd [switches] --pem <path>"
  puts " --pem-passphrase <passphrase>        pem passphrase"
  puts " --bind-address [0.0.0.0]             bind address of proxy"
  puts " --proxy-port [22195]                 port proxy listens on"
  puts " --server <gateway.push.apple.com>    the apn server to send messages to"
  puts " --port <2195>                        the port of the apn server"
  puts " --pid </var/run/apnserverd.pid       the path to store the pid"
  puts " --log </var/log/apnserverd.log       the path to store the log"
  puts " --daemon                             to daemonize the server"
  puts " --help                               this message"
end

def daemonize
  Daemonize.daemonize(@log_file, 'apnserverd')
  open(@pid_file,"w") { |f| f.write(Process.pid) }
  open(@pid_file,"w") do |f|
    f.write(Process.pid)
    File.chmod(0644, @pid_file)
  end
end

opts = GetoptLong.new(
  ["--bind-address", "-b", GetoptLong::REQUIRED_ARGUMENT],
  ["--proxy-port", "-P", GetoptLong::REQUIRED_ARGUMENT],
  ["--server", "-s", GetoptLong::REQUIRED_ARGUMENT],
  ["--port", "-p", GetoptLong::REQUIRED_ARGUMENT],
  ["--pid", "-i", GetoptLong::REQUIRED_ARGUMENT],
  ["--log", "-l", GetoptLong::REQUIRED_ARGUMENT],
  ["--pem", "-c", GetoptLong::REQUIRED_ARGUMENT],
  ["--pem-passphrase", "-C", GetoptLong::REQUIRED_ARGUMENT],
  ["--help", "-h", GetoptLong::NO_ARGUMENT],
  ["--daemon", "-d", GetoptLong::NO_ARGUMENT]
)

bind_address = '0.0.0.0'
proxy_port = 22195
host = 'gateway.push.apple.com'
port = 2195
pem = nil
pem_passphrase = nil
@pid_file = '/var/run/apnserverd.pid'
@log_file = '/var/log/apnserverd.log'
daemon = false

opts.each do |opt, arg|
  case opt
  when '--help'
    usage
    exit 1
  when '--bind-address'
    bind_address = arg
  when '--proxy-port'
    proxy_port = arg.to_i
  when '--server'
    host = arg
  when '--port'
    port = arg.to_i
  when '--pid'
    @pid_file = arg
  when '--log'
    @log_file = arg
  when '--pem'
    pem = File.read(arg)
  when '--pem-passphrase'
    pem_passphrase = arg
  when '--daemon'
    daemon = true
  end
end

if pem.nil?
  usage
  exit 1
else
  daemonize if daemon
  server = ApnServer::Server.new(pem, bind_address, proxy_port) do |feedback_record|
    ApnServer::Config.logger.info "Received feedback at #{feedback_record[:feedback_at]} (length: #{feedback_record[:length]}): #{feedback_record[:device_token]}"
  end
  server.client.host = host
  server.client.port = port
  server.client.password = pem_passphrase
  server.start!
end
