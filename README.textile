h1. Apple Push Notification Server Toolkit for frac.as

This project started off as a fork of "apnserver":https://github.com/bpoweski/apnserver. It
has since taken on a different path. How does it differ from apnserver? By a few key points:

# It implements the APNS feedback service;
# Uses Yajl for JSON encoding/decoding rather than ActiveSupport;
# Expects certificates as strings instead of paths to files;
# Does not assume there is only one certificate; and
# Receives packets containing notifications from beanstalkd instead of a listening socket.

The above changes were made because of the need for an APNS provider to replace the current
provider used by "Diligent Street":http://www.diligentstreet.com/ with something more robust. As such, it needs to be
suitable for a hosted environment, where multiple—unrelated—users of the service will be
using it.

It should be noted that the development of this project is independent of the work bpoweski
is doing on apnserver. If you're looking for that project, "go here":https://github.com/bpoweski/apnserver.

h2. Description

frac-apnserver is a server and a set of command line programs to send push notifications to iOS
devices. Apple recommends to maintain an open connection to the push notification service, and
refrain from opening up and tearing down SSL connections repeatedly. As such, a separate daemon
is introduced that has messages queued up (beanstalkd) for consumption by this daemon. This
decouples the APNS server from your backend system. Those notifications are sent over a
persistent connection to Apple.

h2. Remaining Tasks & Issues

You can see progress by looking at the "Pivotal Tracker":https://www.pivotaltracker.com/projects/251991 page for fracas. Any labels related to
_apnserver_ are related to this subproject.

h2. Preparing Certificates

Certificates must be prepared before they can be used with frac-apnserver. Unfortunately,
Apple gives us @.p12@ files instead of @.pem@ files. As such, we need to convert them. This
can be accomplished by dropping to the command line and running this command:

<pre>
	<code>
		$ openssl pkcs12 -in cert.p12 -out cert.pem -nodes -clcerts
	</code>
</pre>

This will generate a file suitable for use with this daemon, called @cert.pem@. If you're
using frac.as, this is the file you would upload to the web service.

h2. APN Server Daemon

<pre>
  <code>
Usage: apnserverd [options] --beanstalk
  --beanstalk <csv ip:port mappings>
	The comma-separated list of ip:port for beanstalk servers

  --pid <pid file path>
	Path used for the PID file. Defaults to /var/run/apnserver.pid

  --log <log file path>
	Path used for the log file. Defaults to /var/log/apnserver.log

  --help
    usage message

  --daemon
    Runs process as daemon, not available on Windows
  </code>
</pre>

h2. APN Server Client

With the APN server client script you can send push notifications directly to
Apple's APN server over an SSL connection or to the above daemon using a plain socket.
To send a notification to Apple's APN server using SSL the *--pem* option must be used.

<pre>
  <code>
Usage: apnsend [switches] (--b64-token | --hex-token) <token>
  --server <localhost>                 the apn server defaults to a locally running apnserverd
  --port <2195>                        the port of the apn server
  --pem <path>                         the path to the pem file, if a pem is supplied the server
                                       defaults to gateway.push.apple.com:2195
  --pem-passphrase <passphrase>        the pem passphrase
  --alert <message>                    the message to send"
  --sound <default>                    the sound to play, defaults to 'default'
  --badge <number>                     the badge number
  --custom <json string>               a custom json string to be added to the main object
  --b64-token <token>                  a base 64 encoded device token
  --hex-token <token>                  a hex encoded device token
  --help                               this message
  </code>
</pre>

To send a base64 encoded push notification via the command line execute the following:

<pre>
  <code>
  $ apnsend --server gateway.push.apple.com --port 2195 --pem key.pem \
     --b64-token j92f12jh8lqcAwcOVeSIrsBxibaJ0xyCi8/AkmzNlk8= --sound default \
     --alert Hello
  </code>
</pre>

h2. Sending Notifications from Ruby

To configure the client to send to the local apnserverd process configure the ApnServer client with the following.

<pre>
  <code>
  # configured for a using the apnserverd proxy
  ApnServer::Config.host = 'localhost'
  ApnServer::Config.port = 22195
  ApnServer::Config.logger = Rails.logger
  </code>
</pre>

To configure the client to send directly to Apple's push notification server, bypassing the apnserverd process configure the following.

<pre>
  <code>
  ApnServer::Config.pem = '/path/to/pem'
  ApnServer::Config.host = 'gateway.push.apple.com'
  ApnServer::Config.port = 2195
  </code>
</pre>

Finally within we can send a push notification using the following code

<pre>
  <code>
  notification = ApnServer::Notification.new
  notification.device_token = Base64.decode64(apns_token) # if base64 encoded
  notification.alert = message
  notification.badge = 1
  notification.sound = 'default'
  notification.push
  </code>
</pre>


h2. Installation

Apnserver is hosted on "rubygems":https://rubygems.org/gems/apnserver

<pre>
<code>
  $ gem install apnserver
</code>
</pre>

Adding apnserver to your Rails application

<pre>
  <code>
  gem 'apnserver', '>= 0.2.0
  </code>
</pre>


h2. License

(The MIT License)

Copyright (c) 2011 Ben Poweski
Copyright (c) 2011 Jeremy Tregunna

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

